// Generated by CoffeeScript 1.6.2
(function() {
  var AStarPlanner, planner;

  AStarPlanner = (function() {
    function AStarPlanner() {
      this.graph = new Graph(cnvs.mkgraph(config.canvasWidth, config.canvasHeight));
      this.reset(false);
    }

    AStarPlanner.prototype.reset = function(resetGraph) {
      var last;

      if (resetGraph == null) {
        resetGraph = true;
      }
      this.start = this.getConf(400, 400);
      this.start.data = {
        x: 400,
        y: 400,
        theta: -PIHALF,
        theta1: -PIHALF,
        xD: 0,
        yD: 0,
        thetaD: 0,
        theta1D: 0,
        r: 0,
        inflections: 0
      };
      if ((this.path != null) && this.path.length > 1) {
        last = this.path.slice(-1)[0].currentData;
        this.start.data.theta1 = last.theta1;
      }
      return this.goal = this.getConf(400, 400);
    };

    AStarPlanner.prototype.getConf = function(x, y) {
      return this.graph.nodes[x][y];
    };

    AStarPlanner.prototype.setGoal = function(pos) {
      if (pos == null) {
        pos = null;
      }
      if (pos === null) {
        pos = this.adjustGoal();
      }
      if (pos !== null) {
        this.goal = $.extend({}, this.getConf(pos.x, pos.y));
        return this.goal.data = $.extend(this.goal.pos, {
          theta: -PIHALF,
          theta1: -PIHALF
        });
      }
    };

    AStarPlanner.prototype.adjustGoal = function() {
      return null;
    };

    AStarPlanner.prototype.getGoal = function() {
      var pos;

      pos = this.path.slice(-1)[0];
      return this.getConf(pos.x, pos.y);
    };

    AStarPlanner.prototype.distance = function(pos, end) {
      var dist;

      dist = euclid(pos, end);
      return dist;
    };

    AStarPlanner.prototype.deviate = function(conf) {
      var p, _i, _len, _ref, _results;

      _ref = this.path;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.currentData.x += conf.x;
        p.currentData.y += conf.y;
        p.currentData.theta += conf.theta;
        _results.push(p.currentData.theta1 += conf.theta);
      }
      return _results;
    };

    AStarPlanner.prototype.motion = function() {
      var path;

      path = astar.search(this.graph.nodes, this.start, this.goal, this.borders, this.distance);
      if (path.length < 2) {
        $(ctxTruck.canvas).jiggle();
      } else {
        this.path = path;
      }
      return path;
    };

    return AStarPlanner;

  })();

  planner = function() {
    return new AStarPlanner();
  };

  window.AStarPlanner = planner;

  astar.neighbors = function(grid, node, borders) {
    var c, configs, coords, ret, _i, _len;

    if (isNaN(node.data.x)) {
      throw 'somethingâ€™s fishy';
    }
    configs = truck.legalMoves(node.data, borders, Math.max(node.g / 5, 1));
    ret = [];
    for (_i = 0, _len = configs.length; _i < _len; _i++) {
      c = configs[_i];
      coords = {
        x: parseInt(c.x, 10),
        y: parseInt(c.y, 10)
      };
      if (grid[coords.x] && grid[coords.x][coords.y]) {
        grid[coords.x][coords.y].currentData = c;
        ret.push(grid[coords.x][coords.y]);
      }
    }
    return ret;
  };

}).call(this);
