// Generated by CoffeeScript 1.6.2
(function() {
  Array.prototype.last = function() {
    return this.slice(-1)[0];
  };

  window.get32BitImageData = function(ctx, width, height) {
    if (width == null) {
      width = 800;
    }
    if (height == null) {
      height = 800;
    }
    return new Uint32Array(ctx.getImageData(0, 0, width, height).data.buffer);
  };

  window.clone = function(obj) {
    var attr, copy;

    if (null === obj || "object" !== typeof obj) {
      return obj;
    }
    copy = obj.constructor();
    for (attr in obj) {
      if (obj.hasOwnProperty(attr)) {
        copy[attr] = obj[attr];
      }
    }
    return copy;
  };

  window.drawPoint = function(p, color, size, ctx) {
    var offset;

    if (size == null) {
      size = 1;
    }
    if (ctx == null) {
      ctx = ctxTruck;
    }
    if (color) {
      ctx.fillStyle = color;
    }
    offset = size > 1 ? size / 2 : 0;
    ctx.fillRect(p[0] - offset, p[1] - offset, size, size);
    if (color) {
      return ctx.fillStyle = '#000';
    }
  };

  window.sleep = function(ms) {
    var _results;

    ms += new Date().getTime();
    _results = [];
    while (new Date() < ms) {
      _results.push(null);
    }
    return _results;
  };

  window.roundNumber = function(num, dec) {
    return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
  };

  window.multiDimArray = function(cols, rows) {
    var array, c, r, _i, _j;

    array = [];
    for (r = _i = 0; 0 <= rows ? _i < rows : _i > rows; r = 0 <= rows ? ++_i : --_i) {
      array[r] = [];
      for (c = _j = 0; 0 <= cols ? _j < cols : _j > cols; c = 0 <= cols ? ++_j : --_j) {
        array[r][c] = 0;
      }
    }
    return array;
  };

  window.pad = function(number, length) {
    if ((number + "").length >= length) {
      return number + "";
    } else {
      return pad("0" + number, length);
    }
  };

  window.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  window.getRandomArbitrary = function(min, max) {
    return Math.random() * (max - min) + min;
  };

  window.matrix = {
    multiply: function(A, B) {
      return [A[0] * B[0] + A[2] * B[1], A[1] * B[0] + A[3] * B[1], A[0] * B[2] + A[2] * B[3], A[1] * B[2] + A[3] * B[3], A[0] * B[4] + A[2] * B[5] + A[4], A[1] * B[4] + A[3] * B[5] + A[5]];
    },
    multiplyCoords: function(V, A) {
      return this.multiply(A, [V[0], 0, 0, V[1], 0, 0]);
    },
    reset: function() {
      return [1, 0, 0, 1, 0, 0];
    },
    rotate: function(A, rad) {
      var c, s;

      c = Math.cos(rad);
      s = Math.sin(rad);
      return [A[0] * c + A[2] * s, A[1] * c + A[3] * s, -A[0] * s + A[2] * c, -A[1] * s + A[3] * c, A[4], A[5]];
    },
    translate: function(A, x, y) {
      return [A[0], A[1], A[2], A[3], A[0] * x + A[2] * y, A[1] * x + A[3] * y];
    },
    getCoords: function(A) {
      return [Math.round(A[0] + A[2]), Math.round(A[1] + A[3])];
    }
  };

  window.rotateRect = function(rad, x, y, L, W) {
    var c, s;

    W = W / 2;
    c = Math.cos(rad);
    s = Math.sin(rad);
    return [[-W * s + x, W * c + y], [L * c - W * s + x, L * s + W * c + y], [L * c + W * s + x, L * s - W * c + y], [W * s + x, -W * c + y]];
  };

}).call(this);
