// Generated by CoffeeScript 1.6.2
(function() {
  var CanvasHelper;

  CanvasHelper = (function() {
    function CanvasHelper() {}

    CanvasHelper.prototype.resize = function(c, w, h) {
      if (w == null) {
        w = window.innerWidth;
      }
      if (h == null) {
        h = window.innerHeight;
      }
      c.width = w;
      return c.height = h;
    };

    CanvasHelper.prototype.append = function(id, to, width, height) {
      var c;

      if (to == null) {
        to = document.body;
      }
      if (width == null) {
        width = 150;
      }
      if (height == null) {
        height = 150;
      }
      c = document.createElement('canvas');
      c.id = id;
      c.width = width;
      c.height = height;
      return to.appendChild(c).getContext('2d');
    };

    CanvasHelper.prototype.create = function(width, height) {
      var c;

      if (width == null) {
        width = 150;
      }
      if (height == null) {
        height = 150;
      }
      c = document.createElement('canvas');
      c.width = width;
      c.height = height;
      return c.getContext('2d');
    };

    CanvasHelper.prototype.mkgraph = function(rows, cols) {
      var c, graph, r, _i, _j;

      graph = [];
      for (r = _i = 0; 0 <= rows ? _i < rows : _i > rows; r = 0 <= rows ? ++_i : --_i) {
        graph[r] = [];
        for (c = _j = 0; 0 <= cols ? _j < cols : _j > cols; c = 0 <= cols ? ++_j : --_j) {
          graph[r][c] = 0;
        }
      }
      return graph;
    };

    return CanvasHelper;

  })();

  this.cnvs = new CanvasHelper;

  HTMLCanvasElement.prototype.discretize = function(levels) {
    var a, ctx, i, _i, _ref;

    if (levels == null) {
      levels = 2;
    }
    ctx = this.getContext('2d');
    a = new Uint32Array(ctx.getImageData(0, 0, this.width, this.height).data.buffer);
    for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (a[i] > 0) {
        a[i] = 1;
      }
    }
    return a;
  };

  HTMLCanvasElement.prototype.relMouseCoords = function(event) {
    var canvasX, canvasY, currentElement, totalOffsetX, totalOffsetY;

    totalOffsetX = 0;
    totalOffsetY = 0;
    canvasX = 0;
    canvasY = 0;
    currentElement = this;
    while (true) {
      totalOffsetX += currentElement.offsetLeft;
      totalOffsetY += currentElement.offsetTop;
      if (!(currentElement = currentElement.offsetParent)) {
        break;
      }
    }
    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;
    return {
      x: canvasX,
      y: canvasY
    };
  };

}).call(this);
