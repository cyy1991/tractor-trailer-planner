// Generated by CoffeeScript 1.6.2
(function() {
  var app, config, connect, convertToApiUrl, download, fs, http, port, querystring;

  port = 8080;

  querystring = require('querystring');

  fs = require('fs');

  http = require('http');

  connect = require('connect');

  config = require('./config');

  convertToApiUrl = function(path) {
    var p;

    p = {
      center: path.substring('maps/'.length, path.length - '.png'.length),
      zoom: 21,
      size: [640, 640].join('x'),
      maptype: 'roadmap',
      sensor: false,
      style: 'feature:all|element:labels|visibility:off',
      key: config.googleMapsKey
    };
    return 'maps/api/staticmap?style=feature:road|visibility:off&' + querystring.stringify(p);
  };

  download = function(host, path, saveTo, finishCb, errorCb) {
    var data, options, receivingCb, writeFinishedCb;

    options = {
      host: host,
      path: path,
      method: 'GET',
      port: 80
    };
    data = '';
    writeFinishedCb = function(err) {
      if (err) {
        throw err;
      }
      return finishCb(data);
    };
    receivingCb = function(res) {
      res.setEncoding('binary');
      res.on('data', function(chunk) {
        return data += chunk;
      });
      return res.on('end', function() {
        return fs.writeFile(saveTo, data, 'binary', writeFinishedCb);
      });
    };
    return http.get(options, receivingCb).on('error', errorCb);
  };

  app = connect().use(connect["static"](__dirname)).use(connect["static"](__dirname + '/maps')).use(function(request, response) {
    var downCb, downErr, path;

    path = request.originalUrl;
    if (!path.match(/^\/maps/)) {
      response.writeHead(404, {
        'Content-Type': 'text/plain'
      });
      return response.end();
    } else {
      downCb = function(data) {
        response.write(data);
        return response.end();
      };
      downErr = function(error) {
        response.writeHead(500, {
          'Content-Type': 'text/plain'
        });
        return response.end();
      };
      return download('maps.google.com', convertToApiUrl(path), __dirname + path, downCb, downErr);
    }
  }).listen(port);

}).call(this);
